'''  
This code should be backed up on GitHub using lunar.txt, do not try to save .blend files there.
Use Ctrl+Alt+Shift+C to copy Blender script to paste into a different application
This second trial has two aims, arrange six B321 blocks around four S111 spheres in a 444 matrix
and read the items in the matrix to display them as transparent blocks and metal spheres.
When succesful, then animation begins.
NarratorJay, September 2024.
'''

'''
delete all objects
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False, confirm=False)
'''

import bpy
#import bmesh
import numpy as np
import os
import csv
import math
import random

### Set scene, set light ray behaviour, prepare names and matrix
# blender dimensions are x right across screen, y receding, z upwards
# define materials steel and acrylic material properties for refraction and reflection

# more matrix operations to aid solving with Python later.  Not sure it's needed if fn RotateReflectMatrix is used
def CheckEmptiesForBlock(CornerCell):
    print('CornerCell occupies matrix position:',  CornerCell)
    EmptySpace = True
    StillChecking = True
    
    while EmptySpace and StillChecking:
        for CellX in range(CornerCell[0], CornerCell[0] + MBlockXYZ[0], 1):   # syntax is  range(FromValue, ToValue, StepSize), MBlockXYZ[1] is 
            for CellY in range(CornerCell[1], CornerCell[1] + MBlockXYZ[1], 1):
                for CellZ in range(CornerCell[2], CornerCell[2] + MBlockXYZ[2], 1):
                    print('EmptySpace: ', EmptySpace, '   cell (x, y, z): ', CellX, CellY, CellZ)
                    print('Matrix3D[CellX][CellY][CellZ] holds: ', Matrix3D[CellX][CellY][CellZ])
                    if Matrix3D[CellX][CellY][CellZ] != '.':
                        EmptySpace = False
                    else:
                        Matrix3D[CellX][CellY][CellZ] = EachBlock + 'a'
                        # EmptySpace = True

        print('3D \'for\' loops in matrix finished')
        StillChecking = False
        # call fn to fill in cells with 'B-321' suffix 'b', 'c' etc on a different 3D matrix
        # see if matrices can be added, updating Matrix3D as we go
                 
    print('EmptySpace is', str(EmptySpace), ', StillChecking is', str(StillChecking), 'after checking block\'s cells.')
    BlockCofMList = [ CornerCell[0] + MBlockXYZ[0]/2, CornerCell[1] + MBlockXYZ[1]/2, CornerCell[2] + MBlockXYZ[2]/2 ]
    print('CornerCell XYZ positions:',  CornerCell)
    NewBlockXYZ = [MBlockXYZ[0]*0.01, MBlockXYZ[1]*0.01, MBlockXYZ[2]*0.01]
    print('NewBlockXYZ C of M position:', BlockCofMList)
    return(EmptySpace, BlockCofMList, NewBlockXYZ)

# yet more matrix operations to aid positioning with Python (below in RotateBlocksAboutSpheres)
# refer to https://numpy.org/doc/stable/reference/generated/numpy.rot90.html for the change to .rot90
# a middle variable k has been introduced to specify the number of 90 degree rotations
# updating code with k=1
def RotateReflectMatrix(MatrixA):
    for shape in BlockRoots:
        print('line 61 follows to rotate MatrixA which is currently', MatrixA)
        semiMatrixB = np.rot90(MatrixA, k = 1, axes = (0, 1))   # was axes = (0,2) # rotates B321a (flat along x-axis) to B321b (vertical, z)
        print('semiMatrixB is ', semiMatrixB)
        MatrixB = np.rot90(semiMatrixB, k = 1, axes = (1, 0))
        print('MatrixB is ', MatrixB)
        for mx in range(mD):
            for my in range(mD):
                for mz in range(mD):
                    if MatrixB[mx][my][mz][0:4] == shape:
                        MatrixB[mx][my][mz] = shape + 'b'
                         
        semiMatrixC = np.rot90(MatrixA, k = 1, axes = (0, 1))   # rotates B321a (as above) to B321c (set on edge, aligned along y)
        MatrixC = np.rot90(semiMatrixC, k = 1, axes = (1, 0))   # was axes = (2, 0)
        for mx in range(mD):
            for my in range(mD):
                for mz in range(mD):
                    if MatrixC[mx][my][mz][0:4] == shape:
                        MatrixC[mx][my][mz] = shape + 'c'
        print('MatrixC is ', MatrixC)
    
    FormerMatrix = MatrixA + MatrixB + MatrixC  ## added to check 
    print('Former Matrix combines MatrixA, MatrixB and MatrixC: ', FormerMatrix)
    FinalMatrix = FormerMatrix
    rD = mD - 1       # range dimension, rD, is one less than mD, matrix dimension
    for mx in range(mD):
        for my in range(mD):
            for mz in range(mD):
                if FormerMatrix[mx][my][mz][:1] == 'S':
                    FinalMatrix[mx][my][mz] = FormerMatrix[mx][my][mz]
                if MatrixA[mx][my][mz][:4] in BlockRoots:
                    FinalMatrix[mx][my][mz] = MatrixA[mx][my][mz]
                    FinalMatrix[rD - mx][rD - my][rD - mz] = MatrixA[mx][my][mz][:5] + 'd'
                if MatrixB[mx][my][mz][:4] in BlockRoots:
                    FinalMatrix[mx][my][mz] = MatrixB[mx][my][mz]
                    FinalMatrix[rD - mx][rD - my][rD - mz] = MatrixB[mx][my][mz][:5] + 'e'
                if MatrixC[mx][my][mz][:4] in BlockRoots:
                    FinalMatrix[mx][my][mz] = MatrixC[mx][my][mz]
                    FinalMatrix[rD - mx][rD - my][rD - mz] = MatrixC[mx][my][mz][:5] + 'f'                    

    print('FinalMatrix is', FinalMatrix)
    
    
# these copy the matrix operations (above in RotateReflectMAtrix) )that place and spin the group of six blocks 
# link the rotations here with the matrix:  (0, Pi/2, Pi/2) for 'b' <->   np.rot90(..., axes = (0, 2)); np.rot90(..., axes = (1, 0))
# (Pi/2, 0, Pi/2) for 'c' <-> np.rot90(..., axes = (0, 1)); np.rot90(..., axes = (2, 0)) in fn RotateReflectMatrix and BDims aka NewBlockXYZ 
# the starting block, B321a, is created flat with its edge along the x-axis with the command
# bpy.ops.mesh.primitive_cube_add(location = (25, 10, 5), rotation = (0, 0, 0), scale = (15, 10, 5))
def RotateBlocksAboutSpheres(BCoords, BDims, NameRootAppend):
    print('fn RotateBlocksAboutSpheres BCoords, BDims, NameRootAppend:  ', BCoords, BDims, NameRootAppend)
    # flat along x with a space for sphere at (5, 5, 5)
    bpy.ops.mesh.primitive_cube_add(location = (BCoords[0], BCoords[1], BCoords[2]), rotation = (0, 0, 0), scale = (BDims))
    # FullBlockName = PlaceCreateGlitch(NameRootAppend)
    
    # flat along y  with a space for sphere at (5, 5, 5)
    bpy.ops.mesh.primitive_cube_add(location = (BCoords[1], BCoords[2], BCoords[0]), rotation = (0, Pi/2, Pi/2), scale = (BDims))
    # FullBlockName = PlaceCreateGlitch(NameRootAppend)Pi/
    
    # flat along z  with a space for sphere at (5, 5, 5)
    bpy.ops.mesh.primitive_cube_add(location = (BCoords[2], BCoords[0], BCoords[1]), rotation = (Pi/2, 0, Pi/2), scale = (BDims))
    # FullBlockName = PlaceCreateGlitch(NameRootAppend)
    bpy.ops.mesh.primitive_cube_add(location = (CubeD-BCoords[0], CubeD-BCoords[1], CubeD-BCoords[2]), rotation = (0, 0, 0), scale = (BDims))
    # FullBlockName = PlaceCreateGlitch(NameRootAppend)
    bpy.ops.mesh.primitive_cube_add(location = (CubeD-BCoords[1], CubeD-BCoords[2], CubeD-BCoords[0]), rotation = (0, Pi/2, Pi/2), scale = (BDims))
    # FullBlockName = PlaceCreateGlitch(NameRootAppend)
    bpy.ops.mesh.primitive_cube_add(location = (CubeD-BCoords[2], CubeD-BCoords[0], CubeD-BCoords[1]), rotation = (Pi/2, 0, Pi/2), scale = (BDims))
    # FullBlockName = PlaceCreateGlitch(NameRootAppend)
    print('used RotateBlocksAboutSpheres with matrix size', mD)

# separate naming from glitching
# might save glitching for later


def PlaceCreateGlitch(BasePiece, Centre, Spin, Dims):
    for EachGlitch in GlitchDict[BasePiece]:
        print('BasePiece key:', BasePiece, 'with GlitchDict value:', EachGlitch)
        for g in range(len(Offsets)):    
            for c in range(len(Centre)):
                Centre[c] = Centre[c] + Offsets[g] # was Centre[c] = Centre[c] + Offsets[g]
                # this location is for each glitched version # print('Centre location x/y/z is', Centre[c])
                Spin[c] = Spin[c] + Offsets[g]
                Dims[c] = Dims[c] + Offsets[g]
        
        for c in range(len(Centre)):
            Centre[c] = Centre[c] + random.choice(Offsets) # was Centre[c] = Centre[c] + Offsets[g]
            # this location is for each glitched version # print('Centre location x/y/z is', Centre[c])
            Spin[c] = Spin[c] + random.choice(Offsets) * 0.02
            Dims[c] = Dims[c] + random.choice(Offsets)
                
        if BasePiece[:1] == 'B':
            bpy.ops.mesh.primitive_cube_add( location = (Centre[0], Centre[1], Centre[2]), rotation = (Spin[0], Spin[1], Spin[2]), scale = (Dims[0], Dims[1], Dims[2]) )
            bpy.context.active_object.name = EachGlitch
            bpy.context.active_object.data.name = EachGlitch
            bpy.data.objects[EachGlitch].active_material = acrylicBpyMat
            print('Dims for block in fn PlaceCreateGlitch:', Dims, 'for glitched Block', EachGlitch)
        if BasePiece[:1] == 'S':
            print('Dims for sphere in fn PlaceCreateGlitch:', Dims, 'for glitched sphere', EachGlitch)
            bpy.ops.mesh.primitive_uv_sphere_add(segments = 128, ring_count = 64, radius = Dims[0], location = (Centre[0], Centre[1], Centre[2]) )
            bpy.context.active_object.name = EachGlitch
            bpy.context.active_object.data.name = EachGlitch
            if EachGlitch[5:] == 'v':
                bpy.data.objects[EachGlitch].active_material = SphereSteel
            else:
                bpy.data.objects[EachGlitch].active_material = acrylicBpyMat


# clear scene of debris, add the lunar landscape after this
bin = [o for o in bpy.data.objects]
print('Scene items to delete', bin)
while(len(bin) > 2):
    try:
        print('Deleting', bin.pop())
        bpy.data.objects.remove(bin.pop())
    except ReferenceError as e:
        print('Error message', e)
    
# four cubes remained uncleared, introducing previous code
for o in bpy.data.objects:
    print('Object:', o)
    #for i in ActiveItems:
    try:
        # if o.name[:4] == i[:4]:
        print('Deleting', o.name)
        o.user_clear
        bpy.data.objects.remove(o)
    except ReferenceError as e:
        print(e)
            




def NameGlitchVersions(form, ShapeSuffixes):   # dictionary of glitch objects
    print('form:', form, '  ShapeSuffixes:', ShapeSuffixes)
    for group in ShapeSuffixes:
        GlitchGroup = form + group
        GlitchGroupName = GlitchGroup + 'Group'
        GlitchMembers = []
        for s in GlitchItems:
            GlitchMembers.append(GlitchGroup + s)
        GlitchDict[GlitchGroup] = GlitchMembers



bpy.data.materials.new('steel')
SphereSteel = bpy.data.materials['steel']
SphereSteel.use_nodes = True
SphereSteel.node_tree.nodes['Principled BSDF'].inputs[0].default_value = (0.262, 0.262, 0.262, 1)    # base colour HSVA
SphereSteel.node_tree.nodes['Principled BSDF'].inputs[3].default_value = 0.457 # was (0.457, 0.457, 0.457, 1)    # base colour subsurface
SphereSteel.node_tree.nodes['Principled BSDF'].inputs[4].default_value = 0.96    # metallic
SphereSteel.node_tree.nodes['Principled BSDF'].inputs[7].default_value = 0.05   # roughness 



bpy.data.materials.new('acrylic')
acrylicBpyMat = bpy.data.materials['acrylic']
acrylicBpyMat.use_nodes = True
acrylicNodes = acrylicBpyMat.node_tree.nodes
acrylicRefraction = acrylicNodes.new( type = 'ShaderNodeBsdfRefraction' )
acrylicGlass = acrylicNodes.new( type = 'ShaderNodeBsdfGlass' )
acrylicGlass.inputs[1].default_value = 0.0        
mixShader = acrylicNodes.new( type = 'ShaderNodeMixShader' )        
acrylicOutput = acrylicNodes.new( type = 'ShaderNodeOutputMaterial' )
acrylicShaderLinks = acrylicBpyMat.node_tree.links
link = acrylicShaderLinks.new( acrylicRefraction.outputs[0], mixShader.inputs[1] )
link = acrylicShaderLinks.new( acrylicGlass.outputs[0], mixShader.inputs[2] )
link = acrylicShaderLinks.new( mixShader.outputs[0], acrylicOutput.inputs[0] )
input = acrylicNodes['Material Output'].inputs['Surface']
output = acrylicNodes['Glass BSDF'].outputs['BSDF']
acrylicShaderLinks.new(input, output)


# increase light ray bounces to benefit transparent acrylic
scene = bpy.context.scene
scene.render.engine = 'CYCLES'
scene.cycles.transparent_max_bounces = 20
scene.cycles.transmission_max_bounces = 20
scene.cycles.diffusion_bounces = 20
scene.cycles.volume_bounces = 8


# define names of components, create matrix
Pi = math.pi
GroupSuffixes = ['a', 'b', 'c', 'd', 'e', 'f']
SphereSuffixes = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']  # yup, nine
GlitchItems = ['v', 'w', 'x', 'y', 'z']            # was ['v', 'w', 'x']
Offsets =  [-2, -1, 0, 1, 2, -2.1, -1.1, 0.1, 1.1, 2.1, -2.2, -1.2, -0.1, 1.2, 2.2, -1.9, -0.9, 0, 0.9, 1.9, -5, -1, 0, 1, 5] # Offsets = [-2, -1, 0, 1, 2] 
GlitchDict = {}
BlockRoots = ['B321']; BaseSphere = ['S111']; PuzzlePieces = BlockRoots + BaseSphere
AddedCam = ['LowCamera']
ActiveItems = PuzzlePieces + AddedCam
mx = 0;  my = 0;  mz = 0; mD = 4; BScale = 10         # prefix m for matrix which is later scaled *BScale, the diameter of a sphere & length of a cube
SphereSuffixes = SphereSuffixes[:mD]          # sphere quantity matched to matrix size 

CubeD = mD * BScale
Matrix3D = [[['.' for mx in range(mD)] for my in range(mD)] for mz in range(mD)]
print('mx, my, mz, mD values: ', mx, my, mz, mD)


 
 
''' clearing screen was previously handled by:
for o in bpy.data.objects:
    print('Object:', o)
    for i in ActiveItems:
        try:
            if o.name[:4] == i[:4]:
                print('Deleting', o.name)
                o.user_clear
                bpy.data.objects.remove(o)
        except ReferenceError as e:
            print(e)
'''            

            

# _was_ no glitch versions until I get the matrix filled     
for form in PuzzlePieces:
    if form[0] == 'B':
        NameGlitchVersions(form, GroupSuffixes)
    else:
        NameGlitchVersions(form, SphereSuffixes)   

# clear scene of debris
for o in bpy.data.objects:
    print('Object', o)
    for i in ActiveItems:
        try:
            if o.name[:4] == i[:4]:
                print('Deleting', o.name, end="")
                o.user_clear
                bpy.data.objects.remove(o)
        except ReferenceError as e:
            print(e, end="")       # it always produced StructRNA of type Object has been removed
             
''' what about removing the default cube, importing the lunar landscape and placing the structure ready to appear ?'''    
        


mx = 0;  my = 0;  mz = 0; mD = 4; BScale = 10       # prefix m for matrix which is later scaled  # BScale, sphere diameter & cube vertex length
                                                    # mD is 4, start with caltrops
                                                    
# create empty matrix
CubeD = mD * BScale
Matrix3D = [[['.' for mx in range(mD)] for my in range(mD)] for mz in range(mD)]
print('mx, my, mz, mD values: ', mx, my, mz, mD, 'yielding Matrix3D: \n' ,Matrix3D)                

#this works
for mx in range(mD):              # mD has value three in this case
    for my in range(mD):
        for mz in range(mD):
            if mx == my and mx == mz:
                Matrix3D[mx][my][mz] = 'S111' + SphereSuffixes[mx]
                print('Matrix3D position ', mx, my, mz, 'holds object', Matrix3D[mx][my][mz])
                                
print('Updated Matrix3D \n', Matrix3D)


# size and position of B321a is:  
# bpy.ops.mesh.primitive_cube_add(location = (25, 10, 5), rotation = (0, 0, 0), scale = (15, 10, 5) )
# fn RotateBlocksAboutSpheres(BCoords, BDims, NameRootAppend)
RotateBlocksAboutSpheres( [25, 10, 5], [15, 10, 5], 'B321' )


# now get adding blocks with simple motion
for EachBlock in BlockRoots:
    MBlockXYZ = [ int(EachBlock[1:2]), int(EachBlock[2:3]), int(EachBlock[3:4]) ]
    
    # display
    NewBlockXYZ = [MBlockXYZ[0]*BScale, MBlockXYZ[1]*BScale, MBlockXYZ[2]*BScale]
    BDims = NewBlockXYZ
    BCoords = [0, 0, 40]
    bpy.ops.mesh.primitive_cube_add(location = (BCoords[0], BCoords[1], BCoords[2]), rotation = (0, 0, 0), scale = (BDims))
    Stub = EachBlock[0]
    print('MBlockXYZ:', MBlockXYZ, 'with dimensions BDims:', NewBlockXYZ)
    # now start rotating
    # RotateReflectMatrix(MBlockXYZ) \/ 
    # RotateReflectMatrix(Matrix3D)   # can this matrix be rotated and added to?

print('Checking GlitchDict:', GlitchDict)
print('First GlitchDict [B321a] value:', GlitchDict['B321a'])
print('Check second GlitchDict key:', list(GlitchDict.keys())[1])
print('PuzzlePieces:', PuzzlePieces)

PiecesList = list(GlitchDict.keys())
print('PiecesList:', PiecesList)

for Piece in PiecesList:
    print('Piece', Piece, 'sent to PlaceCreateGlitch.  Piece[:1] is', Piece[:1])
    if Piece[:1] == 'B':
        DimsFromName = [ BScale*int(Piece[1:2]), BScale*int(Piece[2:3]), BScale*int(Piece[3:4]) ]
        # was PlaceCreateGlitch(Piece, [0, 0, 40], [0, 0, 0], DimsFromName)
        PlaceCreateGlitch(Piece, [0, 0, 35], [0, 0, 0], DimsFromName)   # was (Piece, [0, 0, 43], [0, 0, 0], DimsFromName)
    else:
        DimsFromName = [BScale, BScale, BScale]
        print('Sphere DimsFromName:', DimsFromName)
        PlaceCreateGlitch(Piece, [20, -10, 20], [0, 0, 0], DimsFromName)


# The code that follows is from library work on rotational matrices, material definitions, ...
# lunar surface to be added
                                
''' lunar2023b.txt
This code is backed up on GitHub using lunar.txt, do not try to save .blend files there

Removed nine items (cylinders,blocks and an icosphere) comprising a lunar base in the original landscape from TurboSquid with this code:
 
BaseBuildings = bpy.data.collections.get('base') 
for Building in BaseBuildings.objects:
    bpy.data.objects.remove(Building, do_unlink=True)
bpy.data.collections.remove(BaseBuildings) 
'''


'''
# for scout craft
def AlignCamLights(NewPosAngle, FrameCount, Tracking, TrackTarget):
    scene.frame_set(FrameCount)
    print('NewPosAngle components are', NewPosAngle, 'FrameCount', FrameCount)
    ItemInfo = bpy.data.objects['camera']
    ItemInfo.location = ( NewPosAngle[0][0], NewPosAngle[0][1], NewPosAngle[0][2] )
    print('NewPosAngle[1] holds values', NewPosAngle[1])
    

    if Tracking:
        TrackingConstraint = ItemInfo.constraints.new('TRACK_TO')
        TrackingConstraint.target = bpy.data.objects[TrackTarget]
        print('camera ItemInfo location and not rotation:', ItemInfo.location)
        ItemInfo.keyframe_insert(data_path = "location",index = -1)
    else:
        ItemInfo.rotation_euler = ( [NewPosAngle[1][0], NewPosAngle[1][1], NewPosAngle[1][2]] )    
        ItemInfo.keyframe_insert(data_path = "location",index = -1)
        ItemInfo.keyframe_insert(data_path = "rotation_euler",index = -1)
        print('Not tracking, camera .rotation_euler values:', ItemInfo.rotation_euler)
        
        ItemInfo = bpy.data.objects['LeftLamp']
        ItemInfo.location = ( [NewPosAngle[0][0] - 2*math.cos(NewPosAngle[1][2]), NewPosAngle[0][1] - 2*math.sin(NewPosAngle[1][2]), NewPosAngle[0][2]] )
        ItemInfo.keyframe_insert(data_path = "location",index = -1)    
        
        ItemInfo = bpy.data.objects['RightLamp']
        ItemInfo.location = ( [NewPosAngle[0][0] + 2*math.cos(NewPosAngle[1][2]), NewPosAngle[0][1] + 2*math.sin(NewPosAngle[1][2]), NewPosAngle[0][2]] )
        ItemInfo.keyframe_insert(data_path = "location",index = -1)
        
        ItemInfo = bpy.data.objects['TopLamp']
        ShortZ = 0.7 * math.sqrt( (math.sin(NewPosAngle[1][0] - Pi/2)) * (math.sin(NewPosAngle[1][0] - Pi/2)) )   # really could have done this with independent axes for scout  
        ItemInfo.location = ( NewPosAngle[0][0] + ShortZ, NewPosAngle[0][1] + ShortZ, 0.7 - ShortZ )
        ItemInfo.keyframe_insert(data_path = "location",index = -1)
    
    # put an  if statement here remove tracking so that re-runs start without tracking
    # TrackingConstraint = ItemInfo.constraints.new('TRACK_TO')
    if Tracking:
        ItemInfo = bpy.data.objects['camera']
        ItemInfo.constraints.remove(TrackingConstraint)
        
### Set scene, set light ray behaviour, prepare names and matrix, define materials
# steel and acrylic materials
'''



        

         




### replace the above loop by calling 
# functions
# AssignName
# CreateGlitchVersions
# AssignMaterial'''


'''
# camera
bpy.ops.object.camera_add(enter_editmode = False, align='VIEW', location = (140, -140, 90), rotation = (1.5, 0, 0.8), scale = (1, 1, 1))
bpy.context.active_object.name = 'LowCamera'
bpy.context.active_object.data.name = 'LowCamera'
bpy.context.scene.camera = bpy.data.objects['LowCamera']
'''

# basic motion

# Frame = 1

'''
# the keyframe line is what was missing before
ItemName = 'B321av'
ItemInfo = bpy.data.objects[ItemName]
bpy.context.scene.frame_set(Frame)
ItemInfo.keyframe_insert(data_path = "location",index = -1)
print('ItemInfo before move:', ItemInfo.location)

TestPieces = PiecesList[:1]
#for EachGlitch in GlitchDict[ItemName]:
#    print('EachGlitch value is:', EachGlitch)
#    if EachGlitch in TestList: # if EachGlitch == 'B321av':   # new line to test single block
GlitchList = GlitchDict['B321a']   # was = GlitchDict[TestPieces]
for g in GlitchList:
        ItemInfo = bpy.data.objects[g]
        bpy.context.scene.frame_set(Frame)
        ItemInfo.keyframe_insert(data_path = "location",index = -1)
        print('ItemInfo before move:', ItemInfo.location)


Frame = 30    # was 120
#for EachGlitch in GlitchDict[ItemName]:
#    print('EachGlitch value is:', EachGlitch)
#    if EachGlitch in TestList: # if EachGlitch == 'B321av':   # new line to test single block
for i, v in enumerate(GlitchList):
        ItemInfo = bpy.data.objects[v]
        bpy.context.scene.frame_set(Frame)
        #ItemInfo.location = (-3 + Offsets[i], 0 - Offsets[i], 100 + Offsets[i])
        ItemInfo.location = (-3 + random.choice(Offsets), 0 - random.choice(Offsets), 100 + random.choice(Offsets))
        #ItemInfo.rotation_euler = (Offsets[i] * 0.03, -(Offsets[i] * 0.02), Offsets[i] * 0.025)
        ItemInfo.rotation_euler = (random.choice(Offsets) * 0.03, -(random.choice(Offsets) * 0.02), random.choice(Offsets) * 0.025)
        ItemInfo.keyframe_insert(data_path = "location",index = -1)
        print('ItemInfo after move:', ItemInfo.location, '   Item rotation:', ItemInfo.rotation_euler)


#ItemInfo = bpy.data.objects(ItemName)
bpy.context.scene.frame_set(Frame)
ItemInfo.location = (-3, 0, 100)
ItemInfo.keyframe_insert(data_path = "location",index = -1)
print('ItemInfo after move:', ItemInfo.location)
'''

# film from exploratory drone
# glitch
# film drone filming glitching blocks
